@page "/import"
@inject IConfiguration config
@inject IFileService fileService

<PageTitle>UDI kodetest revised</PageTitle>

<h3>Importer JSON-data</h3>

@if (maxAllowedFiles > 0)
{
    <p>
        Velg inntil tre filer i JSON-format, maks 1 MB per fil:<br />
        <InputFile OnChange="LoadFiles" multiple />
    </p>
}

@if (errors.Count > 0)
{
    <h4>Feil</h4>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private int maxAllowedFiles = 3;
    private List<string> errors = new();
    private string rootFolder = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        rootFolder = config.GetValue<string>("FileStorage") ?? string.Empty;
        if (string.IsNullOrEmpty(rootFolder))
        {
            errors.Add("Rotmappe (FileStorage) for lagring av JSON datafiler er ikke konfigurert.");
            maxAllowedFiles = 0;
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Forsøkte å laste opp {e.FileCount} filer. Maks tillatte antall er {maxAllowedFiles}.");
            return;
        }

        try
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                errors.Add($"Filen {file.Name} har størrelse {file.Size} bytes");
            }
        }
        catch (Exception ex)
        {
            errors.Add($"En feil oppstod: {ex.Message}");
        }

        var result = await fileService.ImportFilesAsync(e.GetMultipleFiles(maxAllowedFiles));

        if (!result.Success)
        {
            errors.AddRange(result.Errors);
        }
    }
}